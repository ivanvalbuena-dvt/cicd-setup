main:
  steps:
    - initVariables:
        assign:
          - reloadScript                        : ${reloadScript}
          - projectId                           : $${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - executionId                         : $${sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}
          - successful_reload_events_topic_name : ${successful_reload_events_topic_name}
          - successful_reload_events_message    : ${successful_reload_events_message}
    - logStart:
       call: sys.log
       args:
         text: $${"> Starting reload warehouse workflow:" + " " + executionId}
         severity: INFO
    - reloadScript:
        call: submitAndWait
        args:
          projectId: $${projectId}
          jobConfig:
            jobType: "QUERY"
            query:
              query: $${reloadScript}
              useLegacySql: false
        result: queryResponse
    - logLoadingResponse:
       call: sys.log
       args:
         text: $${json.encode_to_string(queryResponse)}
         severity: INFO
    - checkLoadStatus:
        switch:
          - condition: $${queryResponse.status.state == "DONE" and not("errorResult" in queryResponse.status)}
            steps:
                - sendSuccessWarehouseReloadNotification:
                    call: googleapis.pubsub.v1.projects.topics.publish
                    args:
                        topic: $${"projects/" + projectId + "/topics/" + successful_reload_events_topic_name}
                        body:
                            messages:
                            - data: $${base64.encode(json.encode(successful_reload_events_message))}
                - returnSuccess:
                    return: $${queryResponse}
        next: raiseError
    - raiseError:
        raise: $${queryResponse}

submitAndWait:
  params:
    - projectId
    - jobConfig
  steps:
    - initConfig:
        assign:
          - sleep_time: 4
    - submitJob:
        call: http.post
        args:
          url: $${"https://bigquery.googleapis.com/bigquery/v2/projects/" + projectId + "/jobs"}
          headers:
            Content-type: "application/json"
          auth:
            type: OAuth2
          body:
            configuration: $${jobConfig}
        result: jobResponse
    - waitBeforePolling:
        call: sys.sleep
        args:
          seconds: $${sleep_time}
    - pollJob:
        call: http.get
        args:
          url: $${jobResponse.body.selfLink}
          query:
            fields: kind,selfLink,configuration,status
          auth:
            type: OAuth2
        result: jobResponse
    # - logResponse:
    #     call: sys.log
    #     args:
    #       text: $${jobResponse.body}
    #       severity: DEBUG
    - checkJobStatus:
        switch:
          - condition: $${jobResponse.body.status.state == "RUNNING"}
            next: waitBeforePolling
        next: returnStatus
    - returnStatus:
        return: $${jobResponse.body}
